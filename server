#!/usr/bin/env php
<?php
// mcconsole

// Function to create directories recursively
function createDirectories($basePath, $directories)
{
    foreach ($directories as $directory) {
        if (!is_dir($basePath . '/' . $directory)) {
            if (!mkdir($basePath . '/' . $directory, 0755, true)) {
                echo "Failed to create directory: $basePath/$directory\n";
                exit(1);
            }
        }
    }
}

// Function to create files
function createFiles($basePath, $files)
{
    foreach ($files as $file => $content) {
        if (file_put_contents($basePath . '/' . $file, $content) === false) {
            echo "Failed to create file: $basePath/$file\n";
            exit(1);
        }
    }
}

// Function to check if MVC structure exists
function mvcStructureExists($basePath)
{
    $mvcDirectories = [
        'controllers',
        'models',
        'views/layouts',
        'public',
        'runtime',
        'vendor',
    ];

    foreach ($mvcDirectories as $directory) {
        if (!is_dir($basePath . '/' . $directory)) {
            return false;
        }
    }

    return true;
}

// Check if arguments are provided
if ($argc < 2) {
    echo "Usage: php mcconsole create:project Name\n";
    exit(1);
}

// Create Project Command
if ($argv[1] === 'create:project') {
    // Prompt the user for the project name
    echo "Enter the project name: ";
    $projectName = trim(fgets(STDIN));

    // Check if MVC structure exists
    if (mvcStructureExists($projectName)) {
        echo "MVC structure already exists for $projectName.\n";
        exit(1);
    }

    // Define the project structure
    $projectStructure = [
        'controllers',
        'models',
        'views/layouts',
        'public',
        'runtime',
        'vendor',
    ];

    // Create the project directories
    createDirectories($projectName, $projectStructure);

    // Create preliminary files
    $publicFiles = [
        'index.php' => "<?php\n\n// Entry point of your application\n",
    ];

    $viewFiles = [
        'views/layout/main.php' => "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Welcome to $projectName</title>\n</head>\n<body>\n    <h1>Welcome to $projectName</h1>\n</body>\n</html>\n",
    ];

    // Create the preliminary files
    createFiles($projectName . '/public', $publicFiles);
    createFiles($projectName, $viewFiles);

    echo "Project structure created successfully for $projectName.\n";
    exit(0);
}

// Create Controller/Model Command
$composerFile = __DIR__ . '/composer.json';
if (!file_exists($composerFile)) {
    echo "composer.json not found.\n";
    exit(1);
}

$composerData = json_decode(file_get_contents($composerFile), true);
if ($composerData === null || json_last_error() !== JSON_ERROR_NONE) {
    echo "Error parsing composer.json.\n";
    exit(1);
}

// Extract PSR-4 namespace mappings from composer.json
$autoload = $composerData['autoload']['psr-4'] ?? [];
if (empty($autoload)) {
    echo "PSR-4 autoload configuration not found in composer.json.\n";
    exit(1);
}

// Find the first PSR-4 namespace mapping
$projectNamespace = null;
foreach ($autoload as $namespace => $path) {
    $projectNamespace = trim($namespace, '\\');
    break;
}

if (!$projectNamespace) {
    echo "No PSR-4 namespaces found in composer.json.\n";
    exit(1);
}

// Ensure the user has provided the command and necessary arguments
if ($argc < 2 || ($argv[1] !== 'serve' && $argc < 3)) {
    echo "Usage: php mcconsole make:controller|model|serve Name\n";
    exit(1);
}

// Extract command and name
$command = $argv[1];
$name = ($command !== 'serve') ? $argv[2] : null;

// Check if the command is to start the server
if ($command === 'serve') {
    $ip = gethostbyname(gethostname()); // Get machine's IP address
    $port = 8000;

    // Change directory to the public directory
    chdir(__DIR__ . '/public');

    echo "Server started at http://$ip:$port\n";
    echo "Press Ctrl+C to quit.\n";

    // Start PHP's built-in web server
    shell_exec("php -S $ip:$port");
    exit(0);
}